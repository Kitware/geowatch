# Autogenerated via:
# python ~/code/watch/dev/maintain/mirror_package_geowatch.py
from watch.tasks.rutgers_material_seg_v2.datasets.image_dataset import parser, parser, parser, parser, parser, parser, np, torch


def __getattr__(key):
    import watch.tasks.rutgers_material_seg_v2.datasets.image_dataset as mirror
    return getattr(mirror, key)


def __dir__():
    import watch.tasks.rutgers_material_seg_v2.datasets.image_dataset as mirror
    return dir(mirror)


if __name__ == '__main__':
    import argparse
    parser = argparse.ArgumentParser()
    parser.add_argument('--dataset_path', type=str, help='Path to dataset file.')
    parser.add_argument('--split', type=str, default='valid')
    parser.add_argument('--crop_size', type=int, default=300)
    parser.add_argument('--feature_type', type=str, default='pixel')
    parser.add_argument('--test_type', type=str, default=None)
    parser.add_argument('--seed_num', type=int, default=0)
    args = parser.parse_args()

    # Set random seeds.
    import torch
    np.random.seed(args.seed_num)
    torch.random.manual_seed(args.seed_num)

    if args.test_type is None:
        image_slice_dict = {
            'height': args.crop_size,
            'width': args.crop_size,
            'scale': 1,
            'stride': args.crop_size,
            'n_frames': None
        }
        image_slice_cfg = OmegaConf.create(image_slice_dict)
        dataset = ImageDataset(args.dataset_path, split=args.split, image_slice_cfg=image_slice_cfg)
        dataset.__getitem__(0)

    elif args.test_type == 'get_pixel_dist_values':
        test_get_pixel_dist(args)
