# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
.__doc__: &__doc__
    - | 

        Template for this files is (sort of) in
        ~/misc/templates/PYPKG/.gitlab-ci.yml

        # Note: expand yaml
        yaml merge-expand .gitlab-ci.yml _expandyml && cat _expandyml
         
        # GITLAB LINTER
        https://gitlab.kitware.com/smart/watch/-/ci/lint

        * Make sure you add Runners to your project 
        https://gitlab.org.com/smart/watch/-/settings/ci_cd 
        in Runners-> Shared Runners
        and Runners-> Available specific runners

        * Ensure that you are auto-cancel redundant pipelines.
        Navigate to https://gitlab.kitware.com/smart/watch/-/settings/ci_cd and ensure "Auto-cancel redundant pipelines" is checked.

        More details are here https://docs.gitlab.com/ee/ci/pipelines/settings.html#auto-cancel-redundant-pipelines


        TODO:

            - [ ] Optimize caching and creation of the conda environments

            - [X] Allow some network tests to run (and ensure we cache the
                  $HOME/.cache/smart_watch) directory to prevent large
                  downloads.

            - [ ] Create a minimal no-network test suite

            - [ ] Ensure this script follows gitlab-CI best practices (its
                  current state did whataver was necessary to make it work)


# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
stages:
    - lint
    - build
    - test
    - docker


### Conditionals ###

.if-merge-request: &if-merge-request
  if: >-
    $CI_MERGE_REQUEST_IID

.if-merged-into-default: &if-merged-into-default
  if: >-
    $CI_COMMIT_REF_NAME == $CI_DEFAULT_BRANCH && $CI_PIPELINE_SOURCE == "push"


### TEMPLATES ###
# Define common templates using YAML anchors

.common_template:
    &common_template
    variables:
        PIP_CACHE_DIR:
            "$CI_PROJECT_DIR/.cache/pip"
        CONDA_PKGS_DIRS:
            "$CI_PROJECT_DIR/.cache/conda/pkgs"
        CONDA_ENVS_PATH:
            "$CI_PROJECT_DIR/.cache/conda/envs"
        XDG_CACHE_HOME:
            "$CI_PROJECT_DIR/.cache/xdg_cache"
    tags:
        - aws
        - docker
        - linux
        - linux-3.17
        - build
        - smart

.common_template_docker:
  &common_template_docker
  tags:
    - docker
    - linux
    - linux-3.17
    - build
    - aws
    - smart
  before_script:
    - docker info
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY


.test_loose_template:
    &test_loose_template
    <<:
        *common_template
    stage:
        test

    before_script:
        - conda init bash
        - source ~/.bashrc
        - ls -al
        - conda env create -f conda_env.yml --prefix ".cache/conda/envs/loose-watch-env"
        - conda activate ".cache/conda/envs/loose-watch-env"
        - .cache/conda/envs/loose-watch-env/bin/python -m pip install -e .

    script:
        - ./run_tests.py --network watch tests scripts

    after_script:
        - du -sh .cache/*
        - du -sh .cache/xdg_cache/*
        - du -sh .cache/conda/*
        - du -sh .cache/pip/*

    # Coverage is a regex that will parse the coverage from the test stdout
    coverage:
        '/TOTAL.+ ([0-9]{1,3}%)/'

    cache:
        key:
            loose-cache-v1
        paths:
            
            #- .cache/conda/envs/loose-watch-env  # better with or without this?
            - .cache/conda/pkgs
            - .cache/pip
            - .cache/xdg_cache


.test_strict_template:
    &test_strict_template
    <<:
        *common_template
    stage:
        test

    before_script:
        - conda init bash
        - source ~/.bashrc
        - ls -al
        - ./dev/make_strict_req.sh
        - conda env create -f conda_env_strict.yml --prefix ".cache/conda/envs/strict-watch-env"
        - conda activate ".cache/conda/envs/strict-watch-env"
        - pip install -e .
    script:
        # Run a few quick checks first
        # 
        - python -c "from pyproj import CRS ; print(CRS.from_user_input('crs84'))"
        - python -c "from pyproj import CRS ; print(CRS.from_user_input('epsg:4326'))"
        - ./run_tests.py --network watch tests scripts

    after_script:
        - du -sh .cache/*
        - du -sh .cache/xdg_cache/*
        - du -sh .cache/conda/*
        - du -sh .cache/pip/*

    # Coverage is a regex that will parse the coverage from the test stdout
    coverage:
        '/TOTAL.+ ([0-9]{1,3}%)/'

    cache:
        key:
            strict-cache-v1
        paths:
            
            #- .cache/conda/envs/strict-watch-env  # better with or without this?
            - .cache/conda/pkgs
            - .cache/pip
            - .cache/xdg_cache


#### JOBS ###

run_linter:
    <<:
        *common_template
    stage:
        lint

    rules:
        - <<: *if-merge-request
        - <<: *if-merged-into-default

    before_script:
        - conda init bash
        - source ~/.bashrc
        # NOTE: The default env runs Python 3.7, need to run 3.8 for 3.8 syntax
        - conda create -y -n lint_env python=3.8 --override-channels --channel conda-forge
        - conda activate lint_env
        - pip install pip -U
        - ls -al
        - pip install -r requirements/linting.txt 

    script:
        - python dev/lint.py [atk,watch] --mode=lint

    # We should eventually enforce linting
    allow_failure: true

    cache:
        key:
            linter-cache-v1
        paths:
            - .cache/conda/pkgs
            - .cache/pip

    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda3
    needs: []

test_full_loose/conda-linux:
    <<:
        *test_loose_template
    rules:
        - <<: *if-merge-request
        - <<: *if-merged-into-default
    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda3
    needs: []


test_full_strict/conda-linux:
    <<:
        *test_strict_template
    rules:
        - <<: *if-merge-request
        - <<: *if-merged-into-default
    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda3
    needs: []


build_docker_strict:
  <<:
    *common_template_docker
  rules:
    - <<: *if-merge-request
  stage:
    docker
  script:
    - docker build --build-arg BUILD_STRICT=1 -t $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG .
    - docker run --rm $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG /bin/bash -c "source /opt/conda/etc/profile.d/conda.sh && conda activate watch && cd /watch && python run_tests.py watch tests scripts"
  image:
    docker:19.03.12
  variables:
    IMAGE_TAG: latest
  needs: []


build_docker_and_upload_strict:
  <<:
    *common_template_docker
  rules:
    - <<: *if-merged-into-default
  stage:
    docker
  script:
    - docker build --build-arg BUILD_STRICT=1 -t $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG .
    - docker run --rm $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG /bin/bash -c "source /opt/conda/etc/profile.d/conda.sh && conda activate watch && cd /watch && python run_tests.py watch tests scripts"
    # Pushing container only if merging into default branch (i.e. "master")
    - echo "docker push $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG"
    - docker push $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG
  image:
    docker:19.03.12
  variables:
    IMAGE_TAG: latest
  needs: []


.__local_docker_heredoc__:
        - | 

            # Commands to help developers debug pipelines on their local machine
            # Grab the base docker image, (forwarding your ssh credentials), clone
            # the watch repo, create the environment, and run the tests. 
            docker login gitlab.kitware.com:4567

            docker pull registry.smartgitlab.com/kitware/watch/miniconda3
            docker run -v $PWD:/io:ro -v $HOME/.cache/pip:/pip_cache -it registry.smartgitlab.com/kitware/watch/miniconda3 bash
            # Will need to chmod things afterwords
            export PIP_CACHE_DIR=/pip_cache
            echo $PIP_CACHE_DIR
            chmod -R o+rw $PIP_CACHE_DIR
            chmod -R o+rw $PIP_CACHE_DIR
            chmod -R g+rw $PIP_CACHE_DIR
            USER=$(whoami)
            chown -R $USER $PIP_CACHE_DIR
            cd $HOME
            git clone /io ./watch

            cd $HOME/watch
            git checkout dev/flow16

            # STRICT VARIANT
            ./dev/make_strict_req.sh
            conda env create -f conda_env_strict.yml --prefix ".cache/conda/envs/strict-watch-env"
            conda activate ".cache/conda/envs/strict-watch-env"
            pip install -e .
            ./run_tests.py --network watch tests scripts

            # LOOSE VARIANT
            python -c "from pyproj import CRS ; print(CRS.from_user_input('crs84'))"
            conda env create -f conda_env.yml --prefix ".cache/conda/envs/loose-watch-env"
            conda activate ".cache/conda/envs/loose-watch-env"
            .cache/conda/envs/loose-watch-env/bin/python -m pip install -e .
            ./run_tests.py --network watch tests scripts





            #docker run -v -it registry.smartgitlab.com/kitware/watch/miniconda3 bash
            #docker run -v ~/.ssh:/tmp/.ssh:ro -it registry.smartgitlab.com/kitware/watch/miniconda3 bash
            ##docker run -it gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda3 bash
            #cp -R /tmp/.ssh /root/.ssh
            #chmod 700 /root/.ssh
            #chmod 600 /root/.ssh/id_*
            #chmod 644 /root/.ssh/*.pub
            #git clone git@gitlab.kitware.com:smart/watch.git
            #sed 's/>=/==/g' conda_env.yml > conda_env_strict.yml
            #conda env create -f conda_env_strict.yml --prefix "./strict-watch-env"
            -v $PWD:/io
            #ls -al
            #conda activate "./strict-watch-env"

            ./run_tests.py watch tests scripts

            # Pushing miniconda3 env to smart gitlab
            ~/code/ci-docker/miniconda3.dockerfile

            docker login registry.smartgitlab.com --username $CRALL_SMART_GITLAB_USERNAME --password $CRALL_SMART_GITLAB_TOKEN
            docker tag ci-docker/miniconda3 registry.smartgitlab.com/kitware/watch/miniconda3
            docker push registry.smartgitlab.com/kitware/watch/miniconda3


            # Running CI locally
            # References: 
            # https://stackoverflow.com/questions/32933174/use-gitlab-ci-to-run-tests-locally
            cd $HOME/watch

            docker run -d \
              --name gitlab-runner \
              --restart always \
              -v $PWD:$PWD \
              -v /var/run/docker.sock:/var/run/docker.sock \
              gitlab/gitlab-runner:latest

            docker exec -it -w $PWD gitlab-runner gitlab-runner exec docker test_full_loose/conda-linux


            # Also
            # # https://docs.gitlab.com/runner/install/
            # https://docs.gitlab.com/runner/configuration/advanced-configuration.html
            arch=$(dpkg-architecture -q DEB_BUILD_ARCH)
            echo $arch
            curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb"
            sudo dpkg -i "gitlab-runner_${arch}.deb"

            safe_symlink .gitlab-ci-kitware.yml .gitlab-ci.yml
            safe_symlink .gitlab-ci-smart.yml .gitlab-ci.yml


            gitlab-runner exec docker test_full_loose/conda-linux  \
                --docker-volumes "$HOME/.ssh:/root/.ssh:ro"

            python -c "from osgeo import gdal; from pyproj import CRS; print(CRS.from_user_input('epsg:4236'))"
            python -c "from pyproj import CRS; from osgeo import gdal; print(CRS.from_user_input('epsg:4236'))"
