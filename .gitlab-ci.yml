# Note: expand yaml
# yaml merge-expand .gitlab-ci.yml _expandyml && cat _expandyml
# 
# GITLAB LINTEs
# https://gitlab.kitware.com/smart/watch/-/ci/lint

# This CI file has 4 types of jobs:
# (1) in the build stage we we build the wheels on a manylinux docker image
# (2) then in the test stage we install the wheels, run unit tests, and measure coverage
# (3) after testing we sign the wheels with the CI's GPG key
# (4) finally if we are on the release branch we will push the signed wheels to pypi

stages:
  - build
  - test
  - gpgsign
  - deploy


### TEMPLATES ###
# Define common templates using YAML anchors

.common_template: &common_template
    tags:
        # Tags define which runners will accept which jobs
        - docker
        - linux
        - build

    variables:
        # Change pip's cache directory to be inside the project directory since we can
        # only cache local items.
        PIP_CACHE_DIR: "$CI_PROJECT_DIR/mb_work/cache_pip"


.build_template: &build_template
    # Tags define which runners will accept which jobs
    <<: 
        - *common_template

    stage: 
        build

    script: 
        # TODO: is there a way to cache conda create step? It seems really bulky.
        - conda env create -f conda_env.yml
        - conda activate watch
        #- python setup.py bdist_wheel --universal

    cache:
        paths:
            - .cache/pip
            - /opt/conda/envs

    artifacts:
        paths:
            - dist/*.whl


# TODO: eventually differentiate between minimal and full installs
.test_full_template: &test_full_template
    # Tags define which runners will accept which jobs
    <<: 
        - *common_template
    stage: 
        test
    before_script:
        - conda activate watch
        #- pip install .[all]  
        - pip install -e .
    script: 
        - ./run_tests.py
    cache:
        paths:
            - .cache/pip
            - .cache/smart_watch
            - venv/
    # Coverage is a regex that will parse the coverage from the test stdout
    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'


# TODO: eventually differentiate between minimal and full installs
#.test_minimal_template: &test_minimal_template
#    # Tags define which runners will accept which jobs
#    <<: 
#        - *common_template
#    stage: 
#        test
#    before_script:
#        - conda activate watch
#        # - pip install .[tests]  
#        - pip install -e .
#    script: 
#        - ./run_tests.py
#    cache:
#        paths:
#            - .cache/pip
#            - venv/
#    # Coverage is a regex that will parse the coverage from the test stdout
#    coverage: '/TOTAL.+ ([0-9]{1,3}%)/'


### JOBS ###
# Define the actual jobs

# ---------------
# Python 3.8 Jobs

build/conda-linux:
    <<: 
        - *build_template
    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda

test_full/conda-linux:
    <<: 
        - *test_full_template
    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda

test_minimal/conda-linux:
    <<: 
        - *test_minimal_template
    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda



.__local_docker_heredoc__:
        - | 
            docker run -it gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda bash

            cd $HOME
            git clone https://gitlab.kitware.com/smart/watch.git
            cd $HOME/watch

            conda env create -f conda_env.yml

            git checkout dev/0.5.10

            # python setup.py bdist_wheel --universal

            python -V  # Print out python version for debugging
            export PYVER=$(python -c "import sys; print('{}{}'.format(*sys.version_info[0:2]))")
            pip install virtualenv
            virtualenv venv$PYVER
            source venv$PYVER/bin/activate
            pip install pip -U
            pip install pip setuptools -U
            python -V  # Print out python version for debugging
            pip install .[tests]

            # Fixes the LibGL error
            #apt update && apt install libgl1-mesa-glx -y && rm -rf /var/lib/apt/lists/*
            
            ./run_tests.py
