# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
.__doc__: &__doc__
    - | 

        # Note: expand yaml
        yaml merge-expand .gitlab-ci.yml _expandyml && cat _expandyml
         
        # GITLAB LINTER
        https://gitlab.kitware.com/smart/watch/-/ci/lint

        * Make sure you add Runners to your project 
        https://gitlab.org.com/smart/watch/-/settings/ci_cd 
        in Runners-> Shared Runners
        and Runners-> Available specific runners

        * Ensure that you are auto-cancel redundant pipelines.
        Navigate to https://gitlab.kitware.com/smart/watch/-/settings/ci_cd and ensure "Auto-cancel redundant pipelines" is checked.

        More details are here https://docs.gitlab.com/ee/ci/pipelines/settings.html#auto-cancel-redundant-pipelines


        TODO:

            - [ ] Optimize caching and creation of the conda environments

            - [X] Allow some network tests to run (and ensure we cache the
                  $HOME/.cache/smart_watch) directory to prevent large
                  downloads.

            - [ ] Create a minimal no-network test suite

            - [ ] Ensure this script follows gitlab-CI best practices (its
                  current state did whataver was necessary to make it work)


# Abuse YAML notation to make a heredoc. This will be ignored by the CI.
stages:
    - build
    - test
    - .post


### TEMPLATES ###
# Define common templates using YAML anchors

.common_template:
    &common_template
    variables:
        PIP_CACHE_DIR:
            "$CI_PROJECT_DIR/.cache/pip"
        CONDA_PKGS_DIRS:
            "$CI_PROJECT_DIR/.cache/conda/pkgs"
        CONDA_ENVS_PATH:
            "$CI_PROJECT_DIR/.cache/conda/envs"
        XDG_CACHE_HOME:
            "$CI_PROJECT_DIR/.cache/xdg_cache"
    tags:
        - rukbat
        - docker
        - linux
        - linux-3.17
        - build
        - smart

.common_template_docker:
  &common_template_docker
  tags:
    - docker
    - linux
    - linux-3.17
    - build
    - aws
    - smart
  before_script:
    - docker info


.test_loose_template:
    &test_loose_template
    <<:
        *common_template
    stage:
        test

    before_script:
        - conda init bash
        - source ~/.bashrc
        - ls -al
        - conda env create -f conda_env.yml --prefix ".cache/conda/envs/loose-watch-env"
        - conda activate ".cache/conda/envs/loose-watch-env"
        - pip install -e .

    script:
        - ./run_tests.py --network

    after_script:
        - du -sh .cache/*
        - du -sh .cache/xdg_cache/*
        - du -sh .cache/conda/*
        - du -sh .cache/pip/*

    # Coverage is a regex that will parse the coverage from the test stdout
    coverage:
        '/TOTAL.+ ([0-9]{1,3}%)/'

    cache:
        key:
            loose-cache-v1
        paths:
            
            #- .cache/conda/envs/loose-watch-env  # better with or without this?
            - .cache/conda/pkgs
            - .cache/pip
            - .cache/xdg_cache


.test_strict_template:
    &test_strict_template
    <<:
        *common_template
    stage:
        test

    before_script:
        - conda init bash
        - source ~/.bashrc
        - ls -al
        - sed 's/>=/==/g' conda_env.yml > conda_env_strict.yml
        - conda env create -f conda_env_strict.yml --prefix ".cache/conda/envs/strict-watch-env"
        - conda activate ".cache/conda/envs/strict-watch-env"
        - pip install -e .
    script:
        - ./run_tests.py --network

    after_script:
        - du -sh .cache/*
        - du -sh .cache/xdg_cache/*
        - du -sh .cache/conda/*
        - du -sh .cache/pip/*

    # Coverage is a regex that will parse the coverage from the test stdout
    coverage:
        '/TOTAL.+ ([0-9]{1,3}%)/'

    cache:
        key:
            strict-cache-v1
        paths:
            
            #- .cache/conda/envs/strict-watch-env  # better with or without this?
            - .cache/conda/pkgs
            - .cache/pip
            - .cache/xdg_cache


#### JOBS ###


test_full_loose/conda-linux:
    <<:
        *test_loose_template
    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda3


test_full_strict/conda-linux:
    <<:
        *test_strict_template
    image:
        gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda3


build_docker_loose:
  <<:
    *common_template_docker
  stage:
    build
  script:
    - docker build -t $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG .
  image:
    docker:19.03.12
  variables:
    IMAGE_TAG: loose


test_docker_loose:
  <<:
    *common_template_docker
  stage:
    test
  script:
    - cd watch
    - python run_tests.py
  image:
    name: $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG
  variables:
    IMAGE_TAG: loose


upload_docker_loose:
  <<:
    *common_template_docker
  stage:
    .post
  script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - echo "docker push $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG"
    - docker push $CI_REGISTRY_IMAGE/watch:$IMAGE_TAG
  image:
    docker:19.03.12
  variables:
    IMAGE_TAG: loose


.__local_docker_heredoc__:
        - | 

            # Commands to help developers debug pipelines on their local machine
            # Grab the base docker image, (forwarding your ssh credentials), clone
            # the watch repo, create the environment, and run the tests. 
            #
            docker login gitlab.kitware.com:4567

            -v $PWD:/io

            docker pull registry.smartgitlab.com/kitware/watch/miniconda3

            docker run -v ~/.ssh:/tmp/.ssh:ro -it registry.smartgitlab.com/kitware/watch/miniconda3 bash
            #docker run -it gitlab.kitware.com:4567/computer-vision/ci-docker/miniconda3 bash
            cp -R /tmp/.ssh /root/.ssh
            chmod 700 /root/.ssh
            chmod 600 /root/.ssh/id_*
            chmod 644 /root/.ssh/*.pub

            docker run -v $PWD:/io:ro -it registry.smartgitlab.com/kitware/watch/miniconda3 bash
            cd $HOME
            git clone /io ./watch
            cd watch
            #git clone git@gitlab.kitware.com:smart/watch.git

            cd $HOME/watch
            git checkout dev/add_ci

            sed 's/>=/==/g' conda_env.yml > conda_env_strict.yml
            conda env create -f conda_env_strict.yml --prefix "./strict-watch-env"

            ls -al
            conda activate "./strict-watch-env"

            ./run_tests.py

            # Pushing miniconda3 env to smart gitlab
            ~/code/ci-docker/miniconda3.dockerfile

            docker login registry.smartgitlab.com --username $CRALL_SMART_GITLAB_USERNAME --password $CRALL_SMART_GITLAB_TOKEN
            docker tag ci-docker/miniconda3 registry.smartgitlab.com/kitware/watch/miniconda3
            docker push registry.smartgitlab.com/kitware/watch/miniconda3


            # Running CI locally
            # References: 
            # https://stackoverflow.com/questions/32933174/use-gitlab-ci-to-run-tests-locally
            cd $HOME/watch

            docker run -d \
              --name gitlab-runner \
              --restart always \
              -v $PWD:$PWD \
              -v /var/run/docker.sock:/var/run/docker.sock \
              gitlab/gitlab-runner:latest

            docker exec -it -w $PWD gitlab-runner gitlab-runner exec docker test_full_loose/conda-linux


            # Also
            # # https://docs.gitlab.com/runner/install/
            # https://docs.gitlab.com/runner/configuration/advanced-configuration.html
            arch=$(dpkg-architecture -q DEB_BUILD_ARCH)
            echo $arch
            curl -LJO "https://gitlab-runner-downloads.s3.amazonaws.com/latest/deb/gitlab-runner_${arch}.deb"
            sudo dpkg -i "gitlab-runner_${arch}.deb"

            safe_symlink .gitlab-ci-kitware.yml .gitlab-ci.yml
            safe_symlink .gitlab-ci-smart.yml .gitlab-ci.yml


            gitlab-runner exec docker test_full_loose/conda-linux  \
                --docker-volumes "$HOME/.ssh:/root/.ssh:ro"
